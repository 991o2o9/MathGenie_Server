import mongoose from 'mongoose';
import Notification from './src/models/notification.model.js';
import User from './src/models/user.model.js';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectDB = async () => {
  try {
    const MONGO_URI = 'mongodb+srv://admin:amin2007_@intertnershop1.l4yb3.mongodb.net/';
    await mongoose.connect(MONGO_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const checkNotifications = async () => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const allNotifications = await Notification.find({}).lean();
    console.log(`üìß –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${allNotifications.length}`);
    
    if (allNotifications.length === 0) {
      console.log('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
    const paymentNotifications = await Notification.find({
      type: { $in: ['payment_required', 'payment_reminder', 'payment_confirmed'] }
    }).lean();
    
    console.log(`üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ: ${paymentNotifications.length}`);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö:');
    allNotifications.forEach((notification, index) => {
      const createdAt = new Date(notification.createdAt).toLocaleString('ru-RU');
      const recipientsCount = notification.recipients?.length || 0;
      
      console.log(`\n${index + 1}. üìß ${notification.title}`);
      console.log(`   ID: ${notification._id}`);
      console.log(`   –¢–∏–ø: ${notification.type}`);
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${notification.message}`);
      console.log(`   –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: ${recipientsCount}`);
      console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${createdAt}`);
      
      if (notification.recipients && notification.recipients.length > 0) {
        console.log(`   –î–µ—Ç–∞–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:`);
        notification.recipients.forEach((recipient, rIndex) => {
          console.log(`     ${rIndex + 1}. ID: ${recipient.userId}, –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: ${recipient.read || false}`);
        });
      }
      
      if (notification.metadata) {
        console.log(`   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`, JSON.stringify(notification.metadata, null, 2));
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    console.log('\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:');
    
    const students = await User.find({ role: 'STUDENT' }).select('_id username payment.status');
    
    for (const student of students) {
      const studentNotifications = await Notification.find({
        'recipients.userId': student._id
      }).lean();
      
      console.log(`\nüë§ ${student.username} (${student.payment?.status || 'noPayment'}):`);
      console.log(`   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${studentNotifications.length}`);
      
      if (studentNotifications.length > 0) {
        studentNotifications.forEach((notification, index) => {
          console.log(`   ${index + 1}. ${notification.title} - ${notification.type}`);
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  try {
    await connectDB();
    await checkNotifications();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    process.exit(0);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main();
