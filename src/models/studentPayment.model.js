import mongoose from 'mongoose';

/**
 * –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–ª–∞—Ç–µ –≤ –∞–¥–º–∏–Ω–∫–µ
 * –≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é, –∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é User
 */
const studentPaymentSchema = new mongoose.Schema({
  _id: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  username: { type: String, required: true },
  firstName: { type: String },
  lastName: { type: String },
  email: { type: String },
  phone: { type: String },
  group: { type: mongoose.Schema.Types.ObjectId, ref: 'Group' },
  payment: {
    status: { 
      type: String, 
      enum: ['unpaid', 'pending', 'paid', 'overdue', 'cancelled'], 
      default: 'unpaid' 
    },
    amount: { type: Number, default: 0 },
    paidAmount: { type: Number, default: 0 },
    dueDate: { type: Date },
    lastPaymentDate: { type: Date },
    notes: { type: String },
    updatedAt: { type: Date, default: Date.now }
  },
  createdAt: { type: Date, default: Date.now }
}, {
  // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
  collection: 'users',
  strict: false,
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è AdminJS
  timestamps: false
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
studentPaymentSchema.statics.findStudents = async function() {
  const User = mongoose.model('User');
  return User.find({ role: 'STUDENT' })
    .populate('group', 'name')
    .select('username profile.firstName profile.lastName profile.email profile.phone group payment createdAt')
    .lean();
};

// –ú–µ—Ç–æ–¥—ã –¥–ª—è AdminJS
studentPaymentSchema.statics.find = async function(query = {}) {
  const User = mongoose.model('User');
  const students = await User.find({ role: 'STUDENT', ...query })
    .populate('group', 'name')
    .select('username profile.firstName profile.lastName profile.email profile.phone group payment createdAt')
    .lean();
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AdminJS
  return students.map(student => ({
    _id: student._id,
    username: student.username,
    firstName: student.profile?.firstName || '',
    lastName: student.profile?.lastName || '',
    email: student.profile?.email || '',
    phone: student.profile?.phone || '',
    group: student.group,
    payment: student.payment || {
      status: 'unpaid',
      amount: 0,
      paidAmount: 0,
      dueDate: null,
      lastPaymentDate: null,
      notes: '',
      updatedAt: new Date()
    },
    createdAt: student.createdAt
  }));
};

studentPaymentSchema.statics.findOne = async function(query = {}) {
  const User = mongoose.model('User');
  const student = await User.findOne({ role: 'STUDENT', ...query })
    .populate('group', 'name')
    .select('username profile.firstName profile.lastName profile.email profile.phone group payment createdAt')
    .lean();
  
  if (!student) return null;
  
  return {
    _id: student._id,
    username: student.username,
    firstName: student.profile?.firstName || '',
    lastName: student.profile?.lastName || '',
    email: student.profile?.email || '',
    phone: student.profile?.phone || '',
    group: student.group,
    payment: student.payment || {
      status: 'unpaid',
      amount: 0,
      paidAmount: 0,
      dueDate: null,
      lastPaymentDate: null,
      notes: '',
      updatedAt: new Date()
    },
    createdAt: student.createdAt
  };
};

studentPaymentSchema.statics.findById = async function(id) {
  return this.findOne({ _id: id });
};

studentPaymentSchema.statics.update = async function(id, updateData) {
  const User = mongoose.model('User');
  const result = await User.findByIdAndUpdate(id, updateData, { new: true });
  return result;
};

studentPaymentSchema.statics.count = async function(query = {}) {
  const User = mongoose.model('User');
  return User.countDocuments({ role: 'STUDENT', ...query });
};

studentPaymentSchema.statics.findWithPagination = async function(query = {}, options = {}) {
  const User = mongoose.model('User');
  const { limit = 10, offset = 0, sort = {} } = options;
  
  const students = await User.find({ role: 'STUDENT', ...query })
    .populate('group', 'name')
    .select('username profile.firstName profile.lastName profile.email profile.phone group payment createdAt')
    .sort(sort)
    .limit(limit)
    .skip(offset)
    .lean();
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AdminJS
  return students.map(student => ({
    _id: student._id,
    username: student.username,
    firstName: student.profile?.firstName || '',
    lastName: student.profile?.lastName || '',
    email: student.profile?.email || '',
    phone: student.profile?.phone || '',
    group: student.group,
    payment: student.payment || {
      status: 'unpaid',
      amount: 0,
      paidAmount: 0,
      dueDate: null,
      lastPaymentDate: null,
      notes: '',
      updatedAt: new Date()
    },
    createdAt: student.createdAt
  }));
};

studentPaymentSchema.statics.findStudentById = async function(id) {
  const User = mongoose.model('User');
  return User.findOne({ _id: id, role: 'STUDENT' })
    .populate('group', 'name')
    .select('username profile.firstName profile.lastName profile.email profile.phone group payment createdAt')
    .lean();
};

studentPaymentSchema.statics.updateStudentPayment = async function(id, paymentData) {
  const User = mongoose.model('User');
  return User.findByIdAndUpdate(id, {
    payment: {
      ...paymentData,
      updatedAt: new Date()
    }
  }, { new: true });
};

// –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
studentPaymentSchema.virtual('fullName').get(function() {
  if (this.firstName && this.lastName) {
    return `${this.firstName} ${this.lastName}`;
  }
  return this.username;
});

studentPaymentSchema.virtual('isPaid').get(function() {
  return this.payment && this.payment.status === 'paid';
});

studentPaymentSchema.virtual('isOverdue').get(function() {
  if (!this.payment || !this.payment.dueDate) return false;
  return this.payment.status === 'unpaid' && new Date() > this.payment.dueDate;
});

studentPaymentSchema.virtual('paymentStatusLabel').get(function() {
  if (!this.payment) return '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
  
  const statusLabels = {
    'unpaid': '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ',
    'pending': '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏',
    'paid': '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ',
    'overdue': 'üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ',
    'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'
  };
  
  return statusLabels[this.payment.status] || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
studentPaymentSchema.set('toJSON', { virtuals: true });
studentPaymentSchema.set('toObject', { virtuals: true });

const StudentPayment = mongoose.model('StudentPayment', studentPaymentSchema);
export default StudentPayment;
