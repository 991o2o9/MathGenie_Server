import mongoose from 'mongoose';
import User from './src/models/user.model.js';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectDB = async () => {
  try {
    const MONGO_URI = 'mongodb+srv://admin:amin2007_@intertnershop1.l4yb3.mongodb.net/';
    await mongoose.connect(MONGO_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
const checkStudents = async () => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –í—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã
    const allStudents = await User.find({ role: 'STUDENT' }).lean();
    console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${allStudents.length}`);
    
    if (allStudents.length === 0) {
      console.log('‚ùå –°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    // –°—Ç—É–¥–µ–Ω—Ç—ã —Å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    const unpaidStudents = await User.find({
      role: 'STUDENT',
      $or: [
        { 'payment.status': 'unpaid' },
        { 'payment.status': 'overdue' }
      ]
    }).lean();
    
    console.log(`üí∞ –°—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–ø–ª–∞—Ç—ã: ${unpaidStudents.length}`);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º —Å—Ç—É–¥–µ–Ω—Ç–µ
    console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö:');
    allStudents.forEach((student, index) => {
      const paymentStatus = student.payment?.status || 'noPayment';
      const amount = student.payment?.amount || 0;
      const dueDate = student.payment?.dueDate ? new Date(student.payment.dueDate).toLocaleDateString('ru-RU') : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
      const createdAt = new Date(student.createdAt).toLocaleDateString('ru-RU');
      
      console.log(`\n${index + 1}. üë§ ${student.username}`);
      console.log(`   ID: ${student._id}`);
      console.log(`   –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: ${paymentStatus}`);
      console.log(`   –°—É–º–º–∞: ${amount}‚ÇΩ`);
      console.log(`   –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: ${dueDate}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${createdAt}`);
      
      if (student.payment) {
        console.log(`   –î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã:`, JSON.stringify(student.payment, null, 2));
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:');
    const query = {
      role: 'STUDENT',
      $or: [
        { 'payment.status': 'unpaid' },
        { 'payment.status': 'overdue' }
      ]
    };
    
    console.log('–ó–∞–ø—Ä–æ—Å:', JSON.stringify(query, null, 2));
    
    const result = await User.find(query).select('_id username payment.status payment.dueDate payment.amount');
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: ${result.length} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤`);
    
    if (result.length > 0) {
      result.forEach(student => {
        console.log(`   - ${student.username}: ${student.payment?.status} (${student.payment?.amount}‚ÇΩ)`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error);
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  try {
    await connectDB();
    await checkStudents();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    process.exit(0);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main();
