import mongoose from 'mongoose';
import User from './src/models/user.model.js';
import { hashPassword } from './src/utils/bcrypt.js';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const connectDB = async () => {
  try {
    const MONGO_URI = 'mongodb+srv://admin:amin2007_@intertnershop1.l4yb3.mongodb.net/';
    await mongoose.connect(MONGO_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
const createTestStudent = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç
    const existingStudent = await User.findOne({ username: 'test-student-payment' });
    
    if (existingStudent) {
      console.log('üìù –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã...');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
      await User.findByIdAndUpdate(existingStudent._id, {
        'payment.status': 'unpaid',
        'payment.amount': 5000,
        'payment.dueDate': new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π
        'payment.updatedAt': new Date()
      });
      
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "unpaid"');
      return existingStudent._id;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    const hashedPassword = await hashPassword('test123');
    
    const testStudent = new User({
      username: 'test-student-payment',
      password: hashedPassword,
      plainPassword: 'test123',
      role: 'STUDENT',
      payment: {
        status: 'unpaid',
        amount: 5000,
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π
        notes: '–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ'
      },
      profile: {
        firstName: '–¢–µ—Å—Ç',
        lastName: '–°—Ç—É–¥–µ–Ω—Ç',
        email: 'test-payment@example.com'
      }
    });

    await testStudent.save();
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', testStudent._id);
    return testStudent._id;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:', error);
    throw error;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π
const createOverdueStudent = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å—Ç—É–¥–µ–Ω—Ç —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π
    const existingStudent = await User.findOne({ username: 'overdue-student' });
    
    if (existingStudent) {
      console.log('üìù –°—Ç—É–¥–µ–Ω—Ç —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å...');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π
      await User.findByIdAndUpdate(existingStudent._id, {
        'payment.status': 'overdue',
        'payment.amount': 3000,
        'payment.dueDate': new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 –¥–Ω—è –Ω–∞–∑–∞–¥
        'payment.updatedAt': new Date()
      });
      
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "overdue"');
      return existingStudent._id;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π
    const hashedPassword = await hashPassword('test123');
    
    const overdueStudent = new User({
      username: 'overdue-student',
      password: hashedPassword,
      plainPassword: 'test123',
      role: 'STUDENT',
      payment: {
        status: 'overdue',
        amount: 3000,
        dueDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 –¥–Ω—è –Ω–∞–∑–∞–¥
        notes: '–°—Ç—É–¥–µ–Ω—Ç —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      },
      profile: {
        firstName: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π',
        lastName: '–°—Ç—É–¥–µ–Ω—Ç',
        email: 'overdue@example.com'
      }
    });

    await overdueStudent.save();
    console.log('‚úÖ –°—Ç—É–¥–µ–Ω—Ç —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω:', overdueStudent._id);
    return overdueStudent._id;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π:', error);
    throw error;
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  try {
    await connectDB();
    
    console.log('üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ...\n');
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    const unpaidStudentId = await createTestStudent();
    console.log(`   üìö –°—Ç—É–¥–µ–Ω—Ç —Å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º: ${unpaidStudentId}\n`);
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π
    const overdueStudentId = await createOverdueStudent();
    console.log(`   ‚ö†Ô∏è –°—Ç—É–¥–µ–Ω—Ç —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π: ${overdueStudentId}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    const allStudents = await User.find({ role: 'STUDENT' })
      .select('username payment.status payment.amount payment.dueDate')
      .lean();
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:');
    allStudents.forEach(student => {
      const status = student.payment?.status || 'noPayment';
      const amount = student.payment?.amount || 0;
      const dueDate = student.payment?.dueDate ? new Date(student.payment.dueDate).toLocaleDateString('ru-RU') : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
      console.log(`   üë§ ${student.username}: ${status} (${amount}‚ÇΩ, —Å—Ä–æ–∫: ${dueDate})`);
    });
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    process.exit(0);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main();
