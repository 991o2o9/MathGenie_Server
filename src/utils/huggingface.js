import { Groq } from 'groq-sdk';

const GROQ_API_KEY =
  process.env.GROQ_API_KEY ||
  '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';
const MODEL = 'meta-llama/llama-4-scout-17b-16e-instruct';
const FALLBACK_MODEL = 'llama-3.1-8b-instant';

const groq = new Groq({
  apiKey: GROQ_API_KEY,
});

async function askGroq(question) {
  try {
    const chatCompletion = await groq.chat.completions.create({
      messages: [
        {
          role: 'system',
          content: `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. 

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ü—Ä–æ–≤–µ—Ä—è–π —Ñ–∞–∫—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
- –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
- –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –æ—Ç–≤–µ—Ç–∞—Ö
- –ò–∑–±–µ–≥–∞–π –≤—ã–¥—É–º—ã–≤–∞–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–ª–∏ —Ñ–∞–∫—Ç–æ–≤
- –ü—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ –∏ —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏`,
        },
        {
          role: 'user',
          content: question,
        },
      ],
      model: MODEL,
      temperature: 0.3,
      max_tokens: 8192,
      top_p: 0.9,
      stream: false,
    });

    const response = chatCompletion.choices[0].message.content;

    const cyrillicCount = (response.match(/[–∞-—è—ë]/gi) || []).length;
    const totalLetters = (response.match(/[–∞-—è—ëa-z]/gi) || []).length;
    const cyrillicRatio = totalLetters > 0 ? cyrillicCount / totalLetters : 0;

    const suspiciousPatterns = [
      /–∞–≤—Ç–æ—Ä.*—Å—Ç–∞–ª–∏–Ω/gi,
      /–∫–Ω–∏–≥–∞.*–∫–æ—Ç–æ—Ä–æ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç/gi,
      /—Å–æ–≥–ª–∞—Å–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é.*\d{4}.*–∫–æ—Ç–æ—Ä–æ–µ/gi,
    ];

    const hasSuspiciousContent = suspiciousPatterns.some((pattern) =>
      pattern.test(response)
    );

    if (hasSuspiciousContent) {
      console.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç');
    }

    if (cyrillicRatio > 0.7) {
      console.log(
        `‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (${(
          cyrillicRatio * 100
        ).toFixed(1)}% –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)`
      );
      return response;
    }

    console.log(
      'üîÑ –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º...'
    );

    const enhancedQuestion = `–í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!

–í–æ–ø—Ä–æ—Å: ${question}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
- –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–∫—Ç—ã
- –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
- –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏`;

    const secondAttempt = await groq.chat.completions.create({
      messages: [
        {
          role: 'user',
          content: enhancedQuestion,
        },
      ],
      model: MODEL,
      temperature: 0.2,
      max_tokens: 600,
      top_p: 0.8,
      stream: false,
    });

    const secondResponse = secondAttempt.choices[0].message.content;
    const secondCyrillicCount = (secondResponse.match(/[–∞-—è—ë]/gi) || []).length;
    const secondTotalLetters = (secondResponse.match(/[–∞-—è—ëa-z]/gi) || [])
      .length;
    const secondCyrillicRatio =
      secondTotalLetters > 0 ? secondCyrillicCount / secondTotalLetters : 0;

    console.log(
      `üîÑ –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞: ${(secondCyrillicRatio * 100).toFixed(1)}% –∫–∏—Ä–∏–ª–ª–∏—Ü—ã`
    );

    return secondCyrillicRatio > cyrillicRatio ? secondResponse : response;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Groq API:', error);

    if (
      error.message.includes('Model not found') ||
      error.message.includes('unavailable') ||
      error.message.includes('rate limit')
    ) {
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –º–æ–¥–µ–ª—å...');
      return await fallbackToReserveModel(question);
    }

    throw error;
  }
}

async function fallbackToReserveModel(question) {
  try {
    console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –º–æ–¥–µ–ª—å: ${FALLBACK_MODEL}`);

    const chatCompletion = await groq.chat.completions.create({
      messages: [
        {
          role: 'system',
          content:
            '–¢—ã —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.',
        },
        {
          role: 'user',
          content: question,
        },
      ],
      model: FALLBACK_MODEL,
      temperature: 0.3,
      max_tokens: 500,
      stream: false,
    });

    return chatCompletion.choices[0].message.content;
  } catch (fallbackError) {
    console.error('‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Ç–∞–∫–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', fallbackError);
    throw new Error('–í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ (–ø–æ –≤–∞—à–µ–º—É –ø—Ä–∏–º–µ—Ä—É)
async function askGroqStream(question) {
  try {
    const chatCompletion = await groq.chat.completions.create({
      messages: [
        {
          role: 'system',
          content: `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. 

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ü—Ä–æ–≤–µ—Ä—è–π —Ñ–∞–∫—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
- –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
- –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –æ—Ç–≤–µ—Ç–∞—Ö
- –ò–∑–±–µ–≥–∞–π –≤—ã–¥—É–º—ã–≤–∞–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–ª–∏ —Ñ–∞–∫—Ç–æ–≤
- –ü—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ –∏ —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏`,
        },
        {
          role: 'user',
          content: question,
        },
      ],
      model: MODEL,
      temperature: 0.3,
      max_tokens: 1024,
      top_p: 0.9,
      stream: true,
      stop: null,
    });

    let fullResponse = '';

    for await (const chunk of chatCompletion) {
      const content = chunk.choices[0]?.delta?.content || '';
      process.stdout.write(content);
      fullResponse += content;
    }

    return fullResponse;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Groq Stream API:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
function validateResponse(response) {
  const issues = [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ—Å—å —è–∑—ã–∫–æ–≤
  const cyrillicCount = (response.match(/[–∞-—è—ë]/gi) || []).length;
  const latinCount = (response.match(/[a-z]/gi) || []).length;

  if (latinCount > cyrillicCount) {
    issues.push('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
  const suspiciousPhrases = [
    '—Å–æ–≥–ª–∞—Å–Ω–æ –º–æ–∏–º –∑–Ω–∞–Ω–∏—è–º',
    '—è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
    '–∫–∞–∫ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫',
    '–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –º–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
  ];

  suspiciousPhrases.forEach((phrase) => {
    if (response.toLowerCase().includes(phrase.toLowerCase())) {
      issues.push(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ—Ä–∞–∑—É: "${phrase}"`);
    }
  });

  return issues;
}

async function getAdviceFromGroq(prompt) {
  const response = await askGroq(prompt);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
  const issues = validateResponse(response);
  if (issues.length > 0) {
    console.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–≤–µ—Ç–µ:', issues);
  }

  return response;
}

// –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
const askHuggingFace = askGroq;
const getAdviceFromHuggingFace = getAdviceFromGroq;

export {
  askGroq,
  askGroqStream,
  getAdviceFromGroq,
  validateResponse,
  askHuggingFace,
  getAdviceFromHuggingFace,
};
