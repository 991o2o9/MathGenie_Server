// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å email, push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏–ª–∏ WebSocket

import mongoose from 'mongoose';
import Notification from '../models/notification.model.js';

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
const formatDate = (date) => {
  if (!date) return '';
  
  const d = new Date(date);
  const today = new Date();
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);
  
  if (d.toDateString() === today.toDateString()) {
    return '—Å–µ–≥–æ–¥–Ω—è';
  } else if (d.toDateString() === tomorrow.toDateString()) {
    return '–∑–∞–≤—Ç—Ä–∞';
  } else {
    return d.toLocaleDateString('ru-RU', { 
      day: 'numeric', 
      month: 'long',
      weekday: 'long'
    });
  }
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
const formatTime = (time) => {
  if (!time) return '';
  return time;
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
 * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {Object} lessonData - –î–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
 * @param {Array} recipients - –ú–∞—Å—Å–∏–≤ ID –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
export const sendNotification = async (type, lessonData, recipients = []) => {
  try {
    const notificationTypes = {
      'new_lesson': {
        title: 'üìö –ù–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ',
        message: `–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ: "${lessonData.title}" ${formatDate(lessonData.date)} –≤ ${formatTime(lessonData.startTime)}`
      },
      'lesson_updated': {
        title: '‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è',
        message: `–ó–∞–Ω—è—Ç–∏–µ "${lessonData.title}" –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.`
      },
      'lesson_cancelled': {
        title: '‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–Ω—è—Ç–∏—è',
        message: `–ó–∞–Ω—è—Ç–∏–µ "${lessonData.title}" –æ—Ç–º–µ–Ω–µ–Ω–æ ${formatDate(lessonData.date)}`
      },
      'lesson_status_changed': {
        title: 'üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞',
        message: `–°—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç–∏—è "${lessonData.title}" –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "${lessonData.statusText || lessonData.status}"`
      },
      'homework_assigned': {
        title: 'üìù –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ',
        message: `–ü–æ –∑–∞–Ω—è—Ç–∏—é "${lessonData.title}" –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ. –°—Ä–æ–∫ —Å–¥–∞—á–∏: ${formatDate(lessonData.homeworkDeadline)}`
      },
      'reminder': {
        title: '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
        message: `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ –≤ ${formatTime(lessonData.startTime)} –∑–∞–Ω—è—Ç–∏–µ "${lessonData.title}"`
      },
      'payment_required': {
        title: 'üí∞ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞',
        message: '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      },
      'payment_confirmed': {
        title: '‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
        message: '–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç–∏—è—Ö.'
      },
      'payment_reminder': {
        title: '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ',
        message: '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      }
    };

    const notification = notificationTypes[type];
    if (!notification) {
      console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${type}`);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const notificationRecord = new Notification({
      type,
      title: notification.title,
      message: notification.message,
      lessonId: lessonData._id,
      teacher: lessonData.teacher,
      date: lessonData.date,
      recipients: recipients.map(userId => ({ userId })),
      metadata: {
        lessonTitle: lessonData.title,
        lessonDate: lessonData.date,
        lessonTime: lessonData.startTime,
        lessonFormat: lessonData.format,
        lessonStatus: lessonData.status
      }
    });

    await notificationRecord.save();

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', {
      id: notificationRecord._id,
      type,
      title: notification.title,
      message: notification.message,
      lessonId: lessonData._id,
      recipientsCount: recipients.length,
      date: new Date().toISOString()
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (recipients.length > 0) {
      for (const recipientId of recipients) {
        await sendUserNotification(recipientId, notificationRecord);
      }
    }

    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // await sendEmailNotification(notificationRecord);
    // await sendPushNotification(notificationRecord);
    // await sendWebSocketNotification(notificationRecord);

    return notificationRecord;

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    throw error;
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} notification - –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export const sendUserNotification = async (userId, notification) => {
  try {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', {
      userId,
      notificationId: notification._id,
      title: notification.title,
      message: notification.message,
      date: new Date().toISOString()
    });

    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    // await sendPersonalNotification(userId, notification);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
};

/**
 * –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @param {Array} userIds - –ú–∞—Å—Å–∏–≤ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @param {Object} notification - –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export const sendBulkNotifications = async (userIds, notification) => {
  try {
    console.log(`üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`, {
      title: notification.title,
      message: notification.message,
      date: new Date().toISOString()
    });

    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
    // await sendBulkEmailNotifications(userIds, notification);
    // await sendBulkPushNotifications(userIds, notification);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} options - –û–ø—Ü–∏–∏ (limit, skip, unreadOnly)
 */
/**
 * –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
 * @param {number} options.limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
 * @param {number} options.skip - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
 * @param {boolean} options.unreadOnly - –§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @param {boolean} options.withCount - –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @returns {Array|Object} –ú–∞—Å—Å–∏–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç {notifications, total}
 */
export const getUserNotifications = async (userId, options = {}) => {
  try {
    const { limit = 20, skip = 0, unreadOnly = false, withCount = false } = options;
    
    const query = {
      'recipients.userId': userId
    };
    
    if (unreadOnly) {
      query['recipients.read'] = false;
    }

    const notifications = await Notification.find(query)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit)
      .populate('lessonId', 'title date startTime endTime')
      .lean();

    if (withCount) {
      const total = await Notification.countDocuments(query);
      return { notifications, total };
    }

    return notifications;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    throw error;
  }
};

/**
 * –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
 * @param {string} notificationId - ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const markNotificationAsRead = async (notificationId, userId) => {
  try {
    const result = await Notification.updateOne(
      { 
        _id: notificationId,
        'recipients.userId': userId 
      },
      { 
        $set: { 
          'recipients.$.read': true,
          'recipients.$.readAt': new Date()
        } 
      }
    );

    return result.modifiedCount > 0;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error);
    throw error;
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞
 */
export const sendTomorrowReminders = async () => {
  try {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);
    
    const nextDay = new Date(tomorrow);
    nextDay.setDate(nextDay.getDate() + 1);

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    const Schedule = mongoose.model('Schedule');
    const tomorrowLessons = await Schedule.find({
      date: { $gte: tomorrow, $lt: nextDay },
      status: '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω'
    }).lean();

    console.log(`üìÖ –ù–∞–π–¥–µ–Ω–æ ${tomorrowLessons.length} –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞`);

    for (const lesson of tomorrowLessons) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏
      await sendNotification('reminder', lesson);
    }

    return tomorrowLessons.length;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
    throw error;
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç—É
 * @param {string} userId - ID —Å—Ç—É–¥–µ–Ω—Ç–∞
 * @param {boolean} isPaid - –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
 */
export const sendPaymentNotification = async (userId, paymentStatus) => {
  console.log(`üîç [NOTIFICATION] sendPaymentNotification –≤—ã–∑–≤–∞–Ω–∞`);
  console.log(`üîç [NOTIFICATION] userId: ${userId}, paymentStatus: ${paymentStatus}`);
  
  try {
    const User = mongoose.model('User');
    console.log(`üîç [NOTIFICATION] –ò—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å ID: ${userId}`);
    const student = await User.findById(userId).exec();
    
    if (!student) {
      console.warn(`‚ùå [NOTIFICATION] –°—Ç—É–¥–µ–Ω—Ç —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    if (student.role !== 'STUDENT') {
      console.warn(`‚ùå [NOTIFICATION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º (—Ä–æ–ª—å: ${student.role})`);
      return;
    }
    
    console.log(`‚úÖ [NOTIFICATION] –°—Ç—É–¥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: ${student.username}`);

    const notificationTypes = {
      'payment_required': {
        title: 'üí∞ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞',
        message: '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      },
      'payment_confirmed': {
        title: '‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
        message: '–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç–∏—è—Ö.'
      },
      'payment_reminder': {
        title: '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ',
        message: '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      }
    };

    let notificationType;
    
    switch (paymentStatus) {
      case 'paid':
        notificationType = 'payment_confirmed';
        break;
      case 'overdue':
        notificationType = 'payment_required';
        break;
      case 'pending':
        notificationType = 'payment_reminder';
        break;
      default:
        notificationType = 'payment_required';
    }

    console.log(`üìù [NOTIFICATION] –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–∏–ø–∞: ${notificationType}`);
    console.log(`üìù [NOTIFICATION] –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${notificationTypes[notificationType].title}`);
    console.log(`üìù [NOTIFICATION] –°–æ–æ–±—â–µ–Ω–∏–µ: ${notificationTypes[notificationType].message}`);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const notificationRecord = new Notification({
      type: notificationType,
      title: notificationTypes[notificationType].title,
      message: notificationTypes[notificationType].message,
      lessonId: null, // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –∑–∞–Ω—è—Ç–∏—è–º–∏
      teacher: '–°–∏—Å—Ç–µ–º–∞', // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ—Ç —Å–∏—Å—Ç–µ–º—ã
      date: new Date(),
      recipients: [{ userId }],
      metadata: {
        paymentStatus,
        studentId: student._id,
        studentName: student.username,
        dueDate: student.payment?.dueDate,
        amount: student.payment?.amount
      }
    });

    console.log(`üíæ [NOTIFICATION] –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
    await notificationRecord.save();
    console.log(`‚úÖ [NOTIFICATION] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: ${notificationRecord._id}`);

    console.log(`üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É ${student.username}:`, {
      userId,
      paymentStatus,
      notificationType,
      date: new Date().toISOString()
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:', error);
    throw error;
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º
 */
export const sendPaymentRemindersToUnpaidStudents = async () => {
  try {
    const User = mongoose.model('User');
    const unpaidStudents = await User.find({
      role: 'STUDENT',
      $or: [
        { 'payment.status': 'unpaid' },
        { 'payment.status': 'overdue' }
      ]
    }).select('_id username payment.status payment.dueDate payment.amount');

    console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ ${unpaidStudents.length} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–ø–ª–∞—Ç—ã`);

    let notificationsSent = 0;

    for (const student of unpaidStudents) {
      try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        let notificationType = 'payment_reminder';
        
        if (student.payment?.status === 'overdue') {
          notificationType = 'payment_required';
        }

        const notificationTypes = {
          'payment_required': {
            title: 'üí∞ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞',
            message: '–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
          },
          'payment_reminder': {
            title: '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ',
            message: '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
          }
        };

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const notificationRecord = new Notification({
          type: notificationType,
          title: notificationTypes[notificationType].title,
          message: notificationTypes[notificationType].message,
          lessonId: null,
          teacher: '–°–∏—Å—Ç–µ–º–∞',
          date: new Date(),
          recipients: [{ userId: student._id }],
          metadata: {
            paymentStatus: student.payment?.status,
            studentId: student._id,
            studentName: student.username,
            dueDate: student.payment?.dueDate,
            amount: student.payment?.amount
          }
        });

        await notificationRecord.save();
        notificationsSent++;
        
        console.log(`   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç—É ${student.username} (—Å—Ç–∞—Ç—É—Å: ${student.payment?.status})`);
        
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É ${student.username}:`, error);
      }
    }

    console.log(`üí∞ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${notificationsSent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ ${unpaidStudents.length} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤`);
    return notificationsSent;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ:', error);
    throw error;
  }
};

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
 */
export const cleanupOldNotifications = async () => {
  try {
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

    const result = await Notification.deleteMany({
      createdAt: { $lt: thirtyDaysAgo }
    });

    console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
    return result.deletedCount;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    throw error;
  }
};

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π
 */
export const checkOverduePayments = async () => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...');
    
    const User = mongoose.model('User');
    const today = new Date();
    
    // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π
    const overdueStudents = await User.find({
      role: 'STUDENT',
      'payment.status': 'unpaid',
      'payment.dueDate': { $lt: today }
    });

    console.log(`üìÖ –ù–∞–π–¥–µ–Ω–æ ${overdueStudents.length} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π`);

    let updatedCount = 0;

    for (const student of overdueStudents) {
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'overdue'
        await User.findByIdAndUpdate(student._id, {
          'payment.status': 'overdue',
          'payment.updatedAt': new Date()
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        await sendPaymentNotification(student._id, 'overdue');
        
        updatedCount++;
        console.log(`   ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ${student.username}`);
        
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ ${student.username}:`, error);
      }
    }

    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Å—Ç–∞—Ç—É—Å–æ–≤`);
    
    return {
      success: true,
      overdueStudents: overdueStudents.length,
      updatedCount,
      timestamp: new Date().toISOString()
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    
    return {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
};

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)
 */
export const checkAndNotifyUnpaidStudents = async () => {
  try {
    console.log('üîç –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...');
    
    const result = await sendPaymentRemindersToUnpaidStudents();
    
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${result} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã`);
    
    return {
      success: true,
      notificationsSent: result,
      timestamp: new Date().toISOString()
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error);
    
    return {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// export { Notification }; 